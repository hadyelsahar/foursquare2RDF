dotNetRDF
=========

A Library for RDF manipulation and parsing in .Net using C# 3.0

Version 0.7.0 Beta

Robert Vesse 2009-12
rvesse@vdesign-studios.com

License
-------

dotNetRDF is licensed under the GNU GPL Version 3

Alternatively you may use it under the GNU Lesser GPL Version 3 or under the MIT license

If none of these licenses are suitable for your intended use please contact us to discuss
alternative terms

Core Library Usage
------------------

To use this library first unzip to a directory on your computer.

Then in Visual Studio select Add a Reference and use the Browse tab to find the directory where you unzipped the archive.
In this directory you will find a directory named Core which contains several different builds of the library depending
on your target platform.  Note that the build is always called dotNetRDF.dll as this gives optimum compatibility with
package management systems like NuGet.

Please see ReadMe.txt for a complete listing of available builds of the core library

dotNetRDF includes intellisense for all classes providing that the relevant XML documentation file from the appropriate build
is located in the same directory as the DLL file.

To use classes from the library it is generally easiest to import the namespaces you need eg.

C#
using VDS.RDF;

VB
Imports VDS.RDF

Please see the API at http://www.dotnetrdf.org/content.asp?pageID=API for further details on Namespaces,
Classes, Methods etc

Plugin Library Usage
--------------------

This package also contains several plugin libraries which provide additional optional features.

There are two data providers found under the Data directory that can be used to access specific storage backends in conjunction
with the dotNetRDF API.  These are as follows:

- OpenLink Virtuoso -> dotNetRDF.Data.Virtuoso.dll
- Microsoft SQL Server and SQL Azure -> dotNetRDF.Data.Sql.dll (This library is deprecated and not recommend for new development)

There is a single query plugin found under the Query directory that provides full text query support using Lucene.Net:

- Full Text Query -> dotNetRDF.Query.FullText.dll

Please see ReadMe.txt for a complete listing of available builds of these plugin libraries.

Note: Whichever of these plugin libraries you use you should also include the dependencies of that library to ensure it functions correctly.
Dependencies for each library can be found in the directory with the build.

Requirements
------------

To use this library you will need .Net Framework 3.5 SP1 and you may need to install/have available the 
following third party libraries:
- JSON.Net 4.0r8 which can be obtained from http://json.codeplex.com
- HtmlAgilityPack 1.4.0 Stable which can be obtained from http://www.codeplex.com/htmlagilitypack

The relevant DLLs (HtmlAgilityPack.dll and Newtonsoft.Json.Net35.dll) are included with
this release and if you wish to use the library you may need to reference these DLLs as well to ensure it is available in your
project for dotNetRDF to use.

To use either the Data.Sql or Data.Virtuoso library you must include the Core library and its dependencies

If you wish to use the optional Data.Virtuoso library that is also included you will need the additional
OpenLink Virtuoso ADO.Net provider which can be found in the folder with the Data.Virtuoso library

If you wish to use the optional Query.FullText library that is also included you will need the additional
Lucene.Net library which can be found in the folder with the Query.FullText library

Known Issues
------------

We are aware of the following issues with the library.  Please remember that this is an Beta release and so
there are things that may be buggy still and the API is subject to change at our discretion or based upon
user feedback.

Parsing
- RDFa 1.1 support does not currently meet the latest version of the specification
 
Query and Update
- Queries and Updates are not always thread safe - see User Guide for details on how to guarantee this
- Support is as close to the 1.1 specification as we can get but there are some things which are still unclear in the
  latest editors draft and the current test suite is incomplete wrt to the latest draft so we do not guarantee complete 
  support in this release

Storage
- The Async Storage API has been tested as far as possible but we cannot guarantee that there aren't bugs in this new API
 
Change History
--------------

Please see ChangeLog.txt included in this release

Release History
---------------

31/07/2009 - First public Alpha release (Version 0.1.0 Alpha)

03/08/2009 - Rerelease to fix a bug with SQL based storage which occurs when multi-threaded writing is performed

25/09/2009 - Release of Version 0.1.1 Alpha (Build 0.1.1.18640)

5/10/2009 - Re-release of Version 0.1.1 Alpha (Build 0.1.1.20361) which fixes issues with Blank Node IDs and Fast writers when Compression Level is None

27/11/2009 - Release of Version 0.1.2 Alpha (Build 0.1.2.16009)

18/11/2009 - Release of Version 0.1.3 Alpha (Build 0.1.3.20723)

3/2/2010 - Release of Version 0.2.0 Alpha (Build 0.2.0.27063)

11/3/2010 - Release of Version 0.2.1 Alpha (Build 0.2.1.24471)

16/4/2010 - Release of Version 0.2.2 Alpha (Build 0.2.2.24625)

10/8/2010 - Release of Version 0.3.0 Alpha (Build 0.3.0.23092)

8/10/2010 - Release of Version 0.3.1 Alpha (Build 0.3.1.20277)

1/3/2011 - Release of Version 0.4.0 Beta (Build 0.4.0.23346)

20/5/2011 - Release of Version 0.4.1 Beta (Build 0.4.1.15669)

9/9/2011 - Release of Version 0.5.0 Beta (Build 0.5.0.20572)

23/9/2011 - Rerelease of Version 0.5.0 Beta (Build 0.5.0.20572) to include the Query.FullText library

30/11/2011 - Release of Version 0.5.1 Beta (Build 0.5.1.17871)

19/2/2012 - Release of Version 0.6.0 Beta (Build 0.6.0.2145)

3/3/2012 - Maintenance Release of Version 0.6.1 Beta (Build 0.6.1.2156)

1/4/2012 - Release of Version 0.6.2 Beta (Build 0.6.2.2180)

4/7/2012 - Release of Version 0.7.0 Beta (Build 0.7.0.2246)

Acknowledgements
----------------

Acknowledgements can be found in the Acknowledgments.txt file